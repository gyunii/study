<<에라토스테네스의 체 원리>> in 1929
모든 경우의 수를 다 돌며 약수 여부 확인 -> 비효율적 (O(N))

어떤 수의 소수 여부를 확인할 때, 특정한 숫자의 제곱근까지만 약수의 여부를 검증하면 O(N^1/2)로 빠르게 구할 수 있음
EX. 8 = 2*4 = 4*2 처럼 같은 식으로 대칭을 이룸 -> 특정 숫자의 제곱근까지만 약수의 여부를 검증하면 됨

** 대량의 소수를 한꺼번에 판별하고자 할 때 사용하는 것 -> 에라토스테네스의 체 **

에라토스테네스의 체는 가장 먼저 소수를 판별할 범위만큼 배열을 할당하여, 해당하는 값을 넣어주고, 이후에 하나씩 지워나가는 방법을 이용한다.

1) 배열을 생성하여 초기화한다.
2) 2부터 시작해서 특정 수의 배수에 해당하는 수를 모두 지운다.(지울 때 자기자신은 지우지 않고, 이미 지워진 수는 건너뛴다.)
3) 2부터 시작하여 남아있는 수를 모두 출력한다.


import java.util.*;
import java.io.*;

public class Main {
	static boolean[] Prime;
	
	static void isPrime(int n) {
		Prime = new boolean [n+1];
		
		for (int i=0; i<Prime.length; i++) {
	    Prime [i] = true; //  boolean 배열 default = false
	}
		Prime[0] = Prime[1] = false; // 0과 1은 소수가 x
		
		for(int i=2; i<= Math.sqrt(n); i++) { //2부터 n의 제곱근까지의 모든 수
			if(Prime[i]) { // i가 소수일 땐 i 제외한 배수들 모두 false
				for(int j= i*i ; j<=n ; j += i) { // i*i부터 검사 시작
					Prime[j] = false;
				}
			}
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int n= Integer.parseInt(br.readLine()); // n 소수인지 판별
		isPrime(n);

	  } 

    }

